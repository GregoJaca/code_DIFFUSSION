your task is to write a code like generate_perturbed_prompts.py , but which instead of generating many prompts with perturbations, it creates many prompts in a plane. I am going to talk in the langauge of vectors, but these are actually tensors.

take a random seed base_seed and make 
base_generator = torch.Generator().manual_seed(base_seed)
    base_noise = torch.randn(
        (1, channels, image_size, image_size),
        generator=base_generator
    )


then take two more random seeds and make two vectors, which will have two different directions (no need to check this). now make a plane by doing a linspace with these two directions centered at base_noise. then save those.

arguments (similar to generate_perturbed_prompts.py)

Args:
        base_seed (int): Seed for the initial base noise tensor.
        direction_seed (tuple of int): 
        num_prompts_per_direction (tuple of int): 
	len_per_direction (tuple of float): these would kind of the base and height of the plane

        image_size (int): The height and width of the image.
        channels (int): The number of image channels.
        output_dir (str): The directory to save the .pt files.
the tuples are 2 dimensional for now, as they form a plane. the "linspace" in direction i is from -len_per_direction[i]/2 to len_per_direction[i]/2 and there are num_prompts_per_direction points. then save them